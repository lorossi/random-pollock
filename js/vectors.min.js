function Vector(t = 0, i = 0, n = 0) { return this.x = t, this.y = i, this.z = n, this } Vector.prototype = { add: function (t) { if (t instanceof Vector) return this.x += t.x, this.y += t.y, this.z += t.z, this }, sub: function (t) { if (t instanceof Vector) return this.x -= t.x, this.y -= t.y, this.z -= t.z, this }, subtract: function (t) { return sub(t) }, mult: function (t) { return t instanceof Vector ? (this.x *= t.x, this.y *= t.y, this.z *= t.z, this) : "number" == typeof t ? (this.x *= t, this.y *= t, this.z *= t, this) : void 0 }, multiply: function (t) { return this.mult(t) }, divide: function (t) { return t instanceof Vector ? (this.x /= t.x, this.y /= t.y, this.z /= t.z, this) : "number" == typeof t ? (this.x /= t, this.y /= t, this.z /= t, this) : void 0 }, multiplyScalar: function (t) { return this.multiply(t), this }, divideScalar: function (t) { return this.divide(t), this }, min: function () { return Math.min(this.x, this.y, this.z) }, max: function () { return Math.max(this.x, this.y, this.z) }, dot: function (t) { if (t instanceof Vector) return this.x * t.x + this.y * t.y + this.z * t.z }, cross: function (t) { if (t instanceof Vector) return this.x = this.y * t.z - this.z * t.y, this.y = this.z * t.x - this.x * t.z, this.z = this.x * t.y - this.y * t.z, this }, distSq: function (t) { if (t instanceof Vector) return Math.pow(this.x - t.x, 2) + Math.pow(this.y - t.y, 2) + Math.pow(this.z - t.z, 2) }, dist: function (t) { if (t instanceof Vector) return Math.sqrt(this.distSq(t)) }, angleBetween: function (t) { if (t instanceof Vector) return Math.acos(this.dot(this, t) / (this.mag() * t.mag())) }, equals: function (t) { if (t instanceof Vector) return this.x == t.x && this.y == t.y && this.z == t.z }, copy: function () { return new Vector(this.x, this.y, this.z) }, limit: function (t) { if ("number" == typeof t) { let i = this.mag(); if (i > t) return this.multiply(t / i), this } }, setMag: function (t) { if ("number" == typeof t) { let i = this.mag(); return this.multiply(t / i), this } }, rotate: function (t) { if ("number" == typeof t) { let i = Math.cos(t) * this.x - Math.sin(t) * this.y, n = Math.sin(t) * this.x + Math.cos(t) * this.y; return this.x = i, this.y = n, this } }, normalize: function () { return this.divideScalar(this.mag()), this }, invert: function (t, i, n) { return t && (this.x *= -1), i && (this.y *= -1), n && (this.z *= -1), t || i || n || (this.x *= -1, this.y *= -1, this.z *= -1), this }, invertX: function () { return this.invert(!0, !1, !1), this }, invertY: function () { return this.invert(!1, !0, !1), this }, invertZ: function () { return this.invert(!1, !1, !0), this }, mag: function () { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z) }, magSq: function () { return this.x * this.x + this.y * this.y + this.z * this.z }, heading2D: function () { return Math.atan2(this.y, this.x) }, toString: function () { return `x: ${this.x}, y: ${this.y}, z: ${this.z}` } }, Vector.fromAngle2D = function (t) { return t = t || 0, new Vector(Math.cos(t), Math.sin(t), 0) }, Vector.fromAngle3D = function (t, i) { return t = t || 0, i = i || 0, new Vector(Math.cos(t) * Math.cos(i), Math.sin(i), Math.sin(t) * Math.cos(i)) }, Vector.random2D = function () { let t = 2 * Math.random() * Math.PI; return new Vector.fromAngle2D(t) }, Vector.random3D = function () { let t = 2 * Math.random() * Math.PI, i = 2 * Math.random() * Math.PI; return new Vector.fromAngle3D(t, i) }, Vector.fromArray = function (t) { return new Vector(t[0], t[1], t[2]) }, Vector.fromObject = function (t) { return new Vector(t.x, t.y, t.z) };
